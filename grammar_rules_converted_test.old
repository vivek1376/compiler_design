        whole_program -> program_header program_body .
       program_header -> program identifier is
         program_body -> ( declaration ; )* begin ( statement ; )* end program
          declaration -> [ global ] procedure_declaration
                       | [ global ] variable_declaration
procedure_declaration -> procedure_header procedure_body
     procedure_header -> procedure identifier : type_mark ( [parameter_list] )
       parameter_list -> parameter, parameter_list
                       | parameter
            parameter -> variable_declaration
       procedure_body -> ( declaration ; )* begin ( statement ; )* end procedure
 variable_declaration -> variable identifier : type_mark [ [ bound ] ]
            type_mark -> integer
                       | float
                       | string
                       | bool
                bound -> number
            statement -> assignment_statement
                       | if_statement
                       | loop_statement
                       | return_statement
       procedure_call -> identifier ( [argument_list] )
 assignment_statement -> destination := expression
          destination -> identifier [ [ expression> ] ]
         if_statement -> if ( expression ) then ( statement ; )* [ else ( statement ; )* ] end if
       loop_statement -> for ( assignment_statement ; expression ) ( statement ; )* end for
     return_statement -> return expression
           identifier -> [a-zA-Z][a-zA-Z0-9_]*
           expression -> [ not ] arithOp expression'
              arithOp -> relation arithOp'
             relation -> term relation'
                 term -> factor term'
               factor -> ( expression )
                       | [a-zA-Z][a-zA-Z0-9_]* ( [argument_list] )
                       | [ - ] name
                       | [ - ] number
                       | string
                       | true
                       | false
                 name -> [a-zA-Z][a-zA-Z0-9_]* [ [ expression ] ]
        argument_list -> [ not ] arithOp expression' , argument_list
                       | [ not ] arithOp expression'
               number -> [0-9][0-9_]*[.[0-9_]*]
               string -> "[^"]*"
          expression' -> & arithOp expression'
                       | $ arithOp expression'
                       | 系
             arithOp' -> + relation arithOp'
                       | - relation arithOp'
                       | 系
            relation' -> < term relation'
                       | >= term relation'
                       | <= term relation'
                       | > term relation'
                       | == term relation'
                       | != term relation'
                       | 系
                term' -> * factor term'
                       | / factor term'
                       | 系
